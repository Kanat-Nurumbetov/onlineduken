from contextlib import suppress
from appium import webdriver
from appium.options.android import UiAutomator2Options
from appium.options.ios import XCUITestOptions
from pathlib import Path
import os, re, pytest
from dotenv import load_dotenv
import subprocess
import time
import requests
import uuid
from selenium.common.exceptions import WebDriverException

from screens.login_screen import LoginScreen
from core.qr_generator import QrGenerator
from core.device_media import push_png_via_driver
from core.gallery_cleaner import clean_gallery

BASE_DIR = Path(__file__).resolve().parent
ENV_PATH = BASE_DIR / "config" / ".env"
if ENV_PATH.exists():
    load_dotenv(ENV_PATH)
else:
    raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω config/.env –ø–æ –ø—É—Ç–∏: {ENV_PATH}")


def env_bool(name: str, default=False) -> bool:
    v = os.getenv(name)
    if v is None:
        return default
    return v.strip().lower() in ("1", "true", "yes", "y", "on")


def worker_id(config) -> str:
    wi = getattr(config, "workerinput", None)
    return (wi or {}).get("workerid", "gw0")


def worker_index(config) -> int:
    wid = worker_id(config)
    m = re.match(r"gw(\d+)", wid)
    return int(m.group(1)) if m else 0


def resolve_app_path(platform: str = "android") -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    env_key = f"{platform.upper()}_APP_PATH"
    raw = os.getenv(env_key, os.getenv("APP_PATH", "")).strip()

    if not raw:
        raise RuntimeError(f"{env_key} –∏–ª–∏ APP_PATH –ø—É—Å—Ç –≤ config/.env")

    p = Path(raw)
    if not p.is_absolute():
        p = (BASE_DIR / p).resolve()

    if not p.exists():
        raise FileNotFoundError(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {p}")

    return str(p)


def get_appium_url(platform: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL Appium —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ Docker/K8s/–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è)"""
    platform = platform.lower()

    if platform == "android":
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Docker URL > –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ > localhost
        docker_url = os.getenv('ANDROID_APPIUM_URL', os.getenv('APPIUM_ANDROID_URL'))
        if docker_url:
            return docker_url
        host = os.getenv('ANDROID_APPIUM_HOST', os.getenv('APPIUM_HOST', '127.0.0.1'))
        port = os.getenv('ANDROID_APPIUM_PORT', os.getenv('APPIUM_PORT', '4723'))

    elif platform == "ios":
        docker_url = os.getenv('IOS_APPIUM_URL', os.getenv('APPIUM_IOS_URL'))
        if docker_url:
            return docker_url
        host = os.getenv('IOS_APPIUM_HOST', os.getenv('APPIUM_HOST', '127.0.0.1'))
        port = os.getenv('IOS_APPIUM_PORT', '4724')

    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")

    return f'http://{host}:{port}'


def get_device_name(platform: str = "android") -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Docker"""
    if platform.lower() == "android":
        # –í Docker: DEVICE_HOST –∑–∞–¥–∞—ë—Ç —Ö–æ—Å—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
        device_host = os.getenv("DEVICE_HOST")
        if device_host:
            return f"{device_host}:5555"
        return os.getenv("DEVICE_NAME", "emulator-5554")
    else:
        return os.getenv("IOS_DEVICE_NAME", "iPhone 13")


def wait_for_appium(url: str, timeout: int = 60) -> bool:
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Appium —Å–µ—Ä–≤–µ—Ä–∞"""
    status_url = f"{url}/status"
    for _ in range(timeout):
        try:
            response = requests.get(status_url, timeout=1)
            if response.status_code == 200:
                return True
        except requests.RequestException:
            pass
        time.sleep(1)
    return False


def android_options(idx: int = 0) -> UiAutomator2Options:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Android —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ CI/CD"""
    opts = UiAutomator2Options()

    # UDID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    udids = [u.strip() for u in os.getenv('ANDROID_UDIDS', 'emulator-5554').split(',') if u.strip()]
    if idx >= len(udids):
        pytest.skip(f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ Android-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ #{idx}")
    udid = udids[idx]

    opts.set_capability('platformName', 'Android')
    opts.set_capability('udid', udid)
    opts.set_capability('deviceName', get_device_name('android'))

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    opts.set_capability('systemPort', 8200 + idx)
    opts.set_capability('chromeDriverPort', 11000 + idx)
    opts.set_capability('mjpegServerPort', 7810 + idx)

    # AVD –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    avd_names = [a.strip() for a in os.getenv('ANDROID_AVD_NAMES', '').split(',') if a.strip()]
    if avd_names and idx < len(avd_names):
        opts.set_capability('avd', avd_names[idx])
        headless = env_bool('ANDROID_HEADLESS', False)
        avd_args = ['-no-snapshot-load', '-no-snapshot-save']
        avd_args += ['-gpu', 'swiftshader_indirect' if headless else 'angle']
        if headless:
            avd_args += ['-no-window', '-no-audio']
        opts.set_capability('avdArgs', ' '.join(avd_args))
        opts.set_capability('avdLaunchTimeout', 120000)
        opts.set_capability('avdReadyTimeout', 120000)

    # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    opts.set_capability('automationName', 'UiAutomator2')
    opts.set_capability('appium:appPackage', 'kz.halyk.onlinebank.stage')
    opts.set_capability('appium:appActivity', 'kz.halyk.onlinebank.ui_release4.screens.auth.AuthActivity')

    # –ü—É—Ç—å –∫ APK (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if os.getenv('ANDROID_APP_PATH'):
        opts.set_capability('app', resolve_app_path('android'))

    # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
    opts.set_capability('autoGrantPermissions', True)
    opts.set_capability('autoAcceptAlerts', True)

    # –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ CI/CD
    opts.set_capability('newCommandTimeout', 300)
    opts.set_capability('uiautomator2ServerLaunchTimeout', 90000)
    opts.set_capability('uiautomator2ServerInstallTimeout', 90000)
    opts.set_capability('adbExecTimeout', 60000)
    opts.set_capability('androidInstallTimeout', 120000)
    opts.set_capability('ignoreHiddenApiPolicyError', True)
    opts.set_capability('disableWindowAnimation', True)

    return opts


def ios_options(idx: int = 0) -> XCUITestOptions:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è iOS —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    opts = XCUITestOptions()
    opts.set_capability('platformName', 'iOS')
    opts.set_capability('automationName', 'XCUITest')

    udids = [u.strip() for u in os.getenv('IOS_UDIDS', '').split(',') if u.strip()]
    if udids:
        if idx >= len(udids):
            pytest.skip(f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ iOS-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ #{idx}")
        opts.set_capability('udid', udids[idx])

    opts.set_capability('wdaLocalPort', 8100 + idx)
    opts.set_capability('webkitDebugProxyPort', 27753 + idx)

    opts.set_capability('deviceName', get_device_name('ios'))
    opts.set_capability('platformVersion', os.getenv('IOS_VERSION', '15.0'))

    if os.getenv('IOS_APP_PATH'):
        opts.set_capability('app', resolve_app_path('ios'))

    opts.set_capability('autoAcceptAlerts', True)
    opts.set_capability('newCommandTimeout', 300)
    return opts


def get_platform_from_pytest_args() -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ pytest"""
    import sys
    for arg in sys.argv:
        if arg.startswith('--platform='):
            return arg.split('=')[1].lower()
    return os.getenv('TEST_PLATFORM', 'android').lower()


def _slug(nodeid: str) -> str:
    return re.sub(r'[^A-Za-z0-9_.-]+', '_', nodeid)


@pytest.hookimpl(hookwrapper=True, tryfirst=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, "rep_" + rep.when, rep)


def pytest_configure(config):
    config.addinivalue_line(
        "markers", "delayed(seconds=20): –∑–∞–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞/–ø–∞—Ä–∞–º–µ—Ç—Ä–∞"
    )


@pytest.hookimpl(tryfirst=True)
def pytest_runtest_setup(item):
    m = item.get_closest_marker("delayed")
    if m:
        seconds = int(m.kwargs.get("seconds") or (m.args[0] if m.args else 20))
        time.sleep(seconds)


@pytest.fixture(scope="session")
def test_platform():
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return get_platform_from_pytest_args()


@pytest.fixture(scope="session", params=(
        ["android", "ios"] if env_bool("ENABLE_MULTI_PLATFORM")
        else [os.getenv('TEST_PLATFORM', 'android').lower()]
))
def multi_platform(request):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–Ω–æ–≥–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    platform = request.param

    if platform == "ios" and os.uname().sysname != "Darwin":
        if not os.getenv('IOS_REMOTE_URL'):
            pytest.skip("iOS —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç macOS –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–µ iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")

    return platform


@pytest.fixture(scope="session", autouse=True)
def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤"""
    platform = os.getenv('TEST_PLATFORM', 'android').lower()
    appium_url = get_appium_url(platform)

    # –í Docker/CI –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if env_bool("CI") or env_bool("DOCKER_ENV"):
        print("üê≥ Docker/CI –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        print(f"üìç Appium URL: {appium_url}")
        return

    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not env_bool('APPIUM_EXTERNAL'):
        print("‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Appium –∏ —ç–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω—ã.")
        print(f"üìç –û–∂–∏–¥–∞–µ–º—ã–π Appium URL: {appium_url}")

    try:
        response = requests.get(f"{appium_url}/status", timeout=5)
        if response.status_code != 200:
            pytest.skip(f"‚ùå Appium –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ {appium_url}")
        print("‚úÖ Appium –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        pytest.skip(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Appium: {e}")

    print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")


@pytest.fixture(scope="session")
def appium_service():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º Appium —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è)"""
    processes: dict[str, subprocess.Popen | None] = {}

    def ensure(platform: str):
        # –í Docker/CI –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π Appium
        if env_bool('CI') or env_bool('DOCKER_ENV') or env_bool('APPIUM_EXTERNAL'):
            url = get_appium_url(platform)
            if not wait_for_appium(url, timeout=30):
                raise RuntimeError(f"–í–Ω–µ—à–Ω–∏–π Appium –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {url}")
            return None

        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Appium
        url = get_appium_url(platform)
        if url in processes:
            return processes[url]

        host = url.split("://")[1].split(":")[0]
        port = url.split(":")[-1]

        proc = subprocess.Popen([
            'appium',
            '--address', host,
            '--port', port,
            '--relaxed-security'
        ])

        if not wait_for_appium(url, timeout=60):
            proc.terminate()
            proc.wait()
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Appium: {url}")

        processes[url] = proc
        return proc

    yield ensure

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    for proc in processes.values():
        if proc:
            proc.terminate()
            proc.wait()


@pytest.fixture(scope="module")
def driver(request, appium_service, multi_platform):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Docker, CI/CD –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    platform = multi_platform
    idx = worker_index(request.config)

    # –ó–∞–ø—É—Å–∫–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º Appium
    appium_service(platform)

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if platform == "android":
        options = android_options(idx)
    elif platform == "ios":
        options = ios_options(idx)
    else:
        pytest.skip(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")

    appium_url = get_appium_url(platform)

    max_retries = 3
    retry_delay = 10

    for attempt in range(max_retries):
        try:
            print(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Appium: {appium_url} ({platform}) - –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
            driver = webdriver.Remote(appium_url, options=options)
            driver.test_platform = platform
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Appium ({platform})")
            yield driver
            driver.quit()
            return

        except WebDriverException as e:
            error_msg = str(e)
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error_msg[:200]}")

            if "instrumentation process cannot be initialized" in error_msg.lower():
                print("üí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∫—Ä–∞—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")

            if attempt < max_retries - 1:
                print(f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)

                # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ ADB (—Ç–æ–ª—å–∫–æ Android)
                if platform == "android":
                    try:
                        subprocess.run(
                            ["adb", "shell", "am", "force-stop", "kz.halyk.onlinebank.stage"],
                            timeout=10
                        )
                        time.sleep(2)
                    except:
                        pass
            else:
                pytest.skip(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {error_msg[:300]}")


@pytest.fixture
def android_driver(request, appium_service):
    """–î—Ä–∞–π–≤–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Android"""
    idx = worker_index(request.config)
    appium_service("android")

    options = android_options(idx)
    appium_url = get_appium_url("android")

    driver = webdriver.Remote(appium_url, options=options)
    driver.test_platform = "android"
    yield driver
    driver.quit()


@pytest.fixture
def ios_driver(request, appium_service):
    """–î—Ä–∞–π–≤–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è iOS"""
    if os.uname().sysname != "Darwin" and not os.getenv('IOS_REMOTE_URL'):
        pytest.skip("iOS —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç macOS –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–µ iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")

    idx = worker_index(request.config)
    appium_service("ios")

    options = ios_options(idx)
    appium_url = get_appium_url("ios")

    driver = webdriver.Remote(appium_url, options=options)
    driver.test_platform = "ios"
    yield driver
    driver.quit()


@pytest.fixture(scope="module")
def login(driver):
    """–õ–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –º–æ–¥—É–ª—è"""
    login_screen = LoginScreen(driver)

    # –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    phone = os.getenv("TEST_PHONE", "7771112222")
    code = os.getenv("TEST_CODE", "123456")

    try:
        login_screen.phone_enter(phone)
        login_screen.login_click()
        login_screen.confirmation_code_enter(code)
        login_screen.quik_pin_setup()
        login_screen.quik_pin_setup()
        login_screen.geo_permission()
        login_screen.online_duken()
        print("‚úÖ –õ–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        pytest.skip(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")

    return login_screen


# ============ Function fixtures ============
def _worker_album(request) -> str:
    return f"OnlineDuken_{worker_id(request.config)}"


@pytest.fixture
def qr_png_on_device(driver, request):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ QR-–∫–æ–¥–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
    kind = getattr(getattr(request.node, "callspec", None), "params", {}).get("kind")
    album = _worker_album(request)
    gen = QrGenerator()
    name = f"{kind}_{uuid.uuid4().hex[:6]}"
    path = gen.png(kind, filename=f"{name}.png")

    try:
        device_dir = f"/sdcard/Pictures/{album}"
        device_path = push_png_via_driver(driver, path, device_dir=device_dir)
    except NotImplementedError as exc:
        pytest.skip(str(exc))
    except RuntimeError as exc:
        pytest.skip(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å QR –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {exc}")

    return {"album": album, "name": name, "local": path, "device": device_path}


@pytest.fixture
def clean_gallery_before_test(driver, request):
    """–û—á–∏—Å—Ç–∫–∞ –≥–∞–ª–µ—Ä–µ–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    platform = getattr(driver, 'test_platform', 'android')
    ios_udid = os.getenv("IOS_SIM_UDID") if platform == 'ios' else None
    album = _worker_album(request)
    clean_gallery(driver, ios_udid=ios_udid, only_test_album=album)
    yield